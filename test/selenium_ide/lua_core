<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head profile="http://selenium-ide.openqa.org/profiles/test-case">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<link rel="selenium.base" href="http://wiki.serverdev-mediawiki-v1/" />
<title>lua_core</title>
</head>
<body>
<table cellpadding="1" cellspacing="1" border="1">
<thead>
<tr><td rowspan="1" colspan="3">lua_core</td></tr>
</thead><tbody>
<tr>
	<td>store</td>
	<td>javascript{&quot;TestPage&quot;+Math.random()}</td>
	<td>Title</td>
</tr>
<tr>
	<td>open</td>
	<td>/index.php?title=Module:LinkedWikiTest${Title}&amp;action=edit</td>
	<td></td>
</tr>
<tr>
	<td>type</td>
	<td>id=wpTextbox1</td>
	<td>-- @copyright (c) 2016 Bourdercloud.com<br/>-- @author Karima Rafes <karima.rafes@bordercloud.com><br/>-- @link http://www.mediawiki.org/wiki/Extension:LinkedWiki<br/>-- @license CC-by-nc-sa V3.0<br/>--<br/>--  Last version : http://github.com/BorderCloud/LinkedWiki<br/>--<br/>--<br/>-- This work is licensed under the Creative Commons<br/>-- Attribution-NonCommercial-ShareAlike 3.0<br/>-- Unported License. To view a copy of this license,<br/>-- visit http://creativecommons.org/licenses/by-nc-sa/3.0/<br/>-- or send a letter to Creative Commons,<br/>-- 171 Second Street, Suite 300, San Francisco,<br/>-- California, 94105, USA.<br/><br/>--[[<br/>-- Debug console<br/><br/>frame = mw.getCurrentFrame() -- Get a frame object<br/>newFrame = frame:newChild{ -- Get one with args<br/>	title = 'test' ,<br/> args = {<br/> iri = 'http://daap.eu/wiki/Lip(Sys)2/RamanEvolution_Spectrometer'<br/>    }<br/>}<br/><br/>mw.log(p.tests(newFrame) )<br/><br/>]]<br/><br/>local p = {}<br/><br/>function p.checkLitteral(query, litteral)<br/>    local result = ''<br/>    if string.match(query, litteral) then<br/>        result = "OK"<br/>    else<br/>        result = "KO"<br/>    end<br/>    return result<br/>end<br/><br/><br/>function p.checkString(val1, val2)<br/>    local result = ''<br/>    if (val1 ==  nil or val2 ==  nil) then<br/>        result = "KO"<br/>    else<br/>        if val1 ==  val2 then<br/>            result = "OK"<br/>        else<br/>            result = "KO"<br/>        end<br/>    end<br/>    return result<br/>end<br/>function p.checkNumber(val1, val2)<br/>    local result = ''<br/>    if (val1 ==  nil or val2 ==  nil) then<br/>        result = "KO"<br/>    else<br/>        if tonumber(val1) ==  tonumber(val2) then<br/>            result = "OK"<br/>        else<br/>            result = "KO"<br/>        end<br/>    end<br/>    return result<br/>end<br/><br/><br/>function p.tests(f)<br/><br/>    local linkedwiki = require 'linkedwiki'<br/>    local endpoint = 'http://database-test:8890/sparql'<br/>    local config = 'http://database-test/data'<br/><br/><br/>    local xsd = 'http://www.w3.org/2001/XMLSchema#'<br/><br/>    local pr = 'http://database-test/Property:'<br/><br/>    local html = '== TESTS =='.. '\n'<br/><br/>    --linkedwiki.setDebug(true)<br/>    local subject = f.args.iri or linkedwiki.getCurrentIRI();<br/>    html = html .."TEST : linkedwiki.getCurrentIRI()" .. '\n'<br/>    html = html .."RESULT : " .. subject .. '\n'<br/><br/>    linkedwiki.setConfig(config)<br/><br/>    local subject = linkedwiki.getCurrentIRI();<br/><br/>    html = html .."----------------------------------------------------------------------------" ..'\n'<br/>    html = html .."TEST : linkedwiki.explode" ..'\n'<br/><br/>    local str1 = ""<br/>    local str2 = "el1"<br/>    local str3 = "el1;el2"<br/>    local arrTestExplode1 = linkedwiki.explode(";",str1)<br/>    local arrTestExplode2 = linkedwiki.explode(";",str2)<br/>    local arrTestExplode3 = linkedwiki.explode(";",str3)<br/>    html = html .."RESULT : 0==" ..table.getn(arrTestExplode1).. ' \n'<br/>    html = html .."RESULT : 1==" ..table.getn(arrTestExplode2).. ' \n'<br/>    html = html .."RESULT : 2==" ..table.getn(arrTestExplode3).. ' \n'<br/><br/><br/>    html = html .."----------------------------------------------------------------------------" ..'\n'<br/>    html = html .."TEST : linkedwiki.timeStamp" ..'\n'<br/><br/>    local dateStringArg1 = "1971-01-01"<br/>    local dateStringArg2 = "0"<br/>    html = html .."CHECK : timestamp(" ..dateStringArg1.. ')= '..dateStringArg2..'\n'<br/>    html = html ..linkedwiki.timeStamp(dateStringArg1).. ' \n'<br/>    html = html .."RESULT : " ..p.checkNumber(linkedwiki.timeStamp(dateStringArg1), dateStringArg2).. ' \n'<br/><br/>    local dateStringArg1 = "1972-01-01"<br/>    local dateStringArg2 = "0"<br/>    html = html .."CHECK : timestamp(" ..dateStringArg1.. ')= '..dateStringArg2..'\n'<br/>    html = html ..linkedwiki.timeStamp(dateStringArg1).. ' \n'<br/>    html = html .."RESULT : " ..p.checkNumber(linkedwiki.timeStamp(dateStringArg1), dateStringArg2).. ' \n'<br/><br/><br/>    local dateStringArg1 = "1970-01-11T01:10:00+02:00"<br/>    local dateStringArg2 = "0"<br/>    html = html .."CHECK : timestamp(" ..dateStringArg1.. ')= '..dateStringArg2..'\n'<br/>    html = html ..linkedwiki.timeStamp(dateStringArg1).. ' \n'<br/>    html = html .."RESULT : " ..p.checkNumber(linkedwiki.timeStamp(dateStringArg1), dateStringArg2).. ' \n'<br/><br/><br/>    local dateStringArg1 = "1970-01-01"<br/>    local dateStringArg2 = "1970-01-01T00:00:00Z"<br/>    html = html .."CHECK : " ..dateStringArg1.. '=='..dateStringArg2..'\n'<br/>    html = html .."RESULT : " ..p.checkNumber(linkedwiki.timeStamp(dateStringArg1), linkedwiki.timeStamp(dateStringArg2)).. ' \n'<br/><br/>    html = html .."----------------------------------------------------------------------------" ..'\n'<br/>    html = html .."TEST : getValue & addPropertyWithIri without default subject" ..'\n'<br/><br/>    mw.log(linkedwiki.removeSubject(subject))<br/><br/>    html = html .."Insert " .. pr..'Test'..'\n'<br/>    mw.log(linkedwiki.addPropertyWithIri(pr..'type',pr..'Test',subject))<br/>    local tabStr = linkedwiki.getValue(pr..'type',subject)<br/>--    mw.log(linkedwiki.getLastQuery())<br/>    local arr = linkedwiki.explode(";",tabStr)<br/>    html = html .."RESULT : Found " ..table.getn(arr).. ' triple\n'<br/>    html = html .."RESULT : " ..p.checkNumber(table.getn(arr), 1).. ' \n'<br/><br/>--    html = html .."RESULT : " ..tabStr.. '\n'<br/>--<br/>--    for i, iri in ipairs(arr) do<br/>--        html = html .. i .. " : " .. iri .. '\n'<br/>--    end<br/><br/>    html = html .."Insert " .. pr..'Test2'..'\n'<br/>    mw.log(linkedwiki.addPropertyWithIri(pr..'type',pr..'Test2',subject))<br/>    local tabStr2 = linkedwiki.getValue(pr..'type',subject)<br/>--    mw.log(linkedwiki.getLastQuery())<br/>    local arr2 = linkedwiki.explode(";",tabStr2)<br/>    html = html .."RESULT : Found " ..table.getn(arr2).. ' triple\n'<br/>    html = html .."RESULT : " ..p.checkNumber(table.getn(arr2), 2).. ' \n'<br/>--    html = html .."RESULT : " ..tabStr2.. '\n'<br/>--<br/>--    for i, iri in ipairs(arr2) do<br/>--        html = html .. i .. " : " .. iri .. '\n'<br/>--    end<br/><br/>    html = html .."TEST : removeSubject" ..'\n'<br/>    mw.log(linkedwiki.removeSubject(subject))<br/>    local tabStr3 = linkedwiki.getValue(pr..'type',subject)<br/>--    mw.log(linkedwiki.getLastQuery())<br/>    local arr3 = linkedwiki.explode(";",tabStr3)<br/>    html = html .."RESULT : Found " ..table.getn(arr3).. ' triple\n'<br/>    html = html .."RESULT : " ..p.checkNumber(table.getn(arr3), 0).. ' \n'<br/>--    html = html .."RESULT : " ..tabStr3.. '\n'<br/>--<br/>--    for i, iri in ipairs(arr3) do<br/>--        html = html .. i .. " : " .. iri .. '\n'<br/>--    end<br/><br/>    html = html .."----------------------------------------------------------------------------" ..'\n'<br/>    html = html .."TEST : getValue & addPropertyWithIri with default subject" ..'\n'<br/><br/>    linkedwiki.setSubject(subject)<br/>    linkedwiki.removeSubject() -- delete all triples of this subject<br/><br/>    html = html .."Insert " .. pr..'Test'..'\n'<br/>    mw.log(linkedwiki.addPropertyWithIri(pr..'type',pr..'Test'))<br/>    local arr = linkedwiki.explode(";",linkedwiki.getValue(pr..'type'))<br/>    html = html .."RESULT : Found " ..table.getn(arr).. ' triple\n'<br/>    html = html .."RESULT : " ..p.checkNumber(table.getn(arr), 1).. ' \n'<br/><br/>    html = html .."Insert " .. pr..'Test2'..'\n'<br/>    mw.log(linkedwiki.addPropertyWithIri(pr..'type',pr..'Test2'))<br/>    local arr2 = linkedwiki.explode(";",linkedwiki.getValue(pr..'type'))<br/>    html = html .."RESULT : Found " ..table.getn(arr2).. ' triple\n'<br/>    html = html .."RESULT : " ..p.checkNumber(table.getn(arr2), 2).. ' \n'<br/><br/>    html = html .."TEST : removeSubject" ..'\n'<br/>    mw.log(linkedwiki.removeSubject())<br/>    local arr3 = linkedwiki.explode(";",linkedwiki.getValue(pr..'type'))<br/>    html = html .."RESULT : " ..p.checkNumber(table.getn(arr3), 0).. ' \n'<br/><br/>    html = html .."----------------------------------------------------------------------------" ..'\n'<br/>    html = html .."TEST : getValue & addPropertyWithLitteral" ..'\n'<br/><br/>    --linkedwiki.addPropertyWithLitteral(iriProperty, value, type, tagLang, iriSubject)<br/>    --default lang is en in extension.json<br/>    local pT =''<br/>    local litteral=''<br/>    local query=''<br/>    local result = ""<br/>    local arr = {}<br/><br/><br/>    html = html .."----------------------------------------------------------------------------" ..'\n'<br/>    html = html .."TEST : text with lang tag " ..'\n'<br/><br/>    pT = pr..'1'<br/>    litteral='\"\"\"text\"\"\"@en'<br/>    html = html ..'Call Linkedwiki.addPropertyWithLitteral('..pT..',"text")'..'\n'<br/>    html = html .."Insert text === "..litteral..'\n'<br/>    mw.log(linkedwiki.addPropertyWithLitteral(pT,"text"))<br/>    query= linkedwiki.getLastQuery()<br/>    --mw.log(query)<br/>    html = html .."RESULT : " .. p.checkLitteral(query,litteral) ..'\n'<br/>    arr = linkedwiki.explode(";",linkedwiki.getValue(pT))<br/>    html = html .."RESULT : Found " ..table.getn(arr).. ' triple\n'<br/>    html = html .."RESULT : " ..p.checkNumber(table.getn(arr), 1).. ' \n'<br/><br/>    pT = pr..'2'<br/>    litteral='\"\"\"text\"\"\"@en'<br/>    html = html ..'Call Linkedwiki.addPropertyWithLitteral('..pT..',"text",nil)'..'\n'<br/>    html = html .."Insert "..litteral..'\n'<br/>    mw.log(linkedwiki.addPropertyWithLitteral(pT,"text",nil))<br/>    query= linkedwiki.getLastQuery()<br/>    --mw.log(query)<br/>    html = html .."RESULT : " .. p.checkLitteral(query,litteral) ..'\n'<br/>    arr = linkedwiki.explode(";",linkedwiki.getValue(pT))<br/>    html = html .."RESULT : Found " ..table.getn(arr).. ' triple\n'<br/>    html = html .."RESULT : " ..p.checkNumber(table.getn(arr), 1).. ' \n'<br/><br/>    pT = pr..'3'<br/>    litteral='\"\"\"text\"\"\"@fr'<br/>    html = html ..'Call Linkedwiki.addPropertyWithLitteral('..pT..',"text",nil,"fr")'..'\n'<br/>    html = html .."Insert "..litteral..'\n'<br/>    mw.log(linkedwiki.addPropertyWithLitteral(pT,"text",nil,"fr"))<br/>    query= linkedwiki.getLastQuery()<br/>    --mw.log(query)<br/>    html = html .."RESULT : " .. p.checkLitteral(query,litteral) ..'\n'<br/>    arr = linkedwiki.explode(";",linkedwiki.getValue(pT))<br/>    html = html .."RESULT : Found " ..table.getn(arr).. ' triple\n'<br/>    html = html .."RESULT : " ..p.checkNumber(table.getn(arr), 1).. ' \n'<br/><br/>    pT = pr..'4'<br/>    litteral='\"\"\"text\"\"\"'<br/>    html = html ..'Call Linkedwiki.addPropertyWithLitteral('..pT..',"text",nil,"")'..'\n'<br/>    html = html .."Insert "..litteral..'\n'<br/>    mw.log(linkedwiki.addPropertyWithLitteral(pT,"text",nil,""))<br/>    query= linkedwiki.getLastQuery()<br/>    mw.log(query)<br/>    html = html .."RESULT : " .. p.checkLitteral(query,litteral) ..'\n'<br/>    arr = linkedwiki.explode(";",linkedwiki.getValue(pT))<br/>    html = html .."RESULT : Found " ..table.getn(arr).. ' triple\n'<br/>    html = html .."RESULT : " ..p.checkNumber(table.getn(arr), 1).. ' \n'<br/><br/>    pT = pr..'5'<br/>    litteral='\"\"\"text\"\"\"'<br/>    html = html ..'Call Linkedwiki.addPropertyWithLitteral('..pT..',"text",nil,nil)'..'\n'<br/>    html = html .."Insert "..litteral..'\n'<br/>    mw.log(linkedwiki.addPropertyWithLitteral(pT,"text",nil,nil))<br/>    query= linkedwiki.getLastQuery()<br/>    mw.log(query)<br/>    html = html .."RESULT : " .. p.checkLitteral(query,litteral) ..'\n'<br/>    arr = linkedwiki.explode(";",linkedwiki.getValue(pT))<br/>    html = html .."RESULT : Found " ..table.getn(arr).. ' triple\n'<br/>    html = html .."RESULT : " ..p.checkNumber(table.getn(arr), 1).. ' \n'<br/><br/>    pT = pr..'6'<br/>    litteral='\"\"\"text\"\"\"'<br/>    html = html ..'Call Linkedwiki.addPropertyWithLitteral('..pT..',"text",nil,nil)'..'\n'<br/>    html = html .."Insert "..litteral..'\n'<br/>    mw.log(linkedwiki.addPropertyWithLitteral(pT,"text",nil,nil))<br/>    query= linkedwiki.getLastQuery()<br/>    mw.log(query)<br/>    html = html .."RESULT : " .. p.checkLitteral(query,litteral) ..'\n'<br/>    arr = linkedwiki.explode(";",linkedwiki.getValue(pT))<br/>    html = html .."RESULT : Found " ..table.getn(arr).. ' triple\n'<br/>    html = html .."RESULT : " ..p.checkNumber(table.getn(arr), 1).. ' \n'<br/><br/>    html = html .."TEST : removeSubject" ..'\n'<br/>    mw.log(linkedwiki.removeSubject())<br/><br/><br/>    html = html .."----------------------------------------------------------------------------" ..'\n'<br/>    html = html .."TEST : integer" ..'\n'<br/><br/>    pT = pr..'7'<br/>    litteral='2'<br/>    html = html ..'Call Linkedwiki.addPropertyWithLitteral('..pT..',2)'..'\n'<br/>    html = html .."Insert "..litteral..'\n'<br/>    mw.log(linkedwiki.addPropertyWithLitteral(pT,2))<br/>    query= linkedwiki.getLastQuery()<br/>    mw.log(query)<br/>    html = html .."RESULT : " .. p.checkLitteral(query,litteral) ..'\n'<br/>    arr = linkedwiki.explode(";",linkedwiki.getValue(pT))<br/>    html = html .."RESULT : Found " ..table.getn(arr).. ' triple\n'<br/>    html = html .."RESULT : " ..p.checkNumber(table.getn(arr), 1).. ' \n'<br/><br/>    html = html .."TEST : removeSubject" ..'\n'<br/>    mw.log(linkedwiki.removeSubject())<br/><br/>    html = html .."----------------------------------------------------------------------------" ..'\n'<br/>    html = html .."TEST : decimal" ..'\n'<br/><br/>    pT = pr..'8'<br/>    litteral='"2"^^<'..xsd.."decimal"..'>'<br/>    html = html ..'Call Linkedwiki.addPropertyWithLitteral('..pT..',2,xsd.."decimal")'..'\n'<br/>    html = html .."Insert "..litteral..'\n'<br/>    mw.log(linkedwiki.addPropertyWithLitteral(pT,2,xsd.."decimal"))<br/>    query= linkedwiki.getLastQuery()<br/>    mw.log(query)<br/>    html = html .."RESULT : " .. p.checkLitteral(query,litteral) ..'\n'<br/>    arr = linkedwiki.explode(";",linkedwiki.getValue(pT))<br/>    html = html .."RESULT : Found " ..table.getn(arr).. ' triple\n'<br/>    html = html .."RESULT : " ..p.checkNumber(table.getn(arr), 1).. ' \n'<br/>    html = html .."RESULT : " ..p.checkNumber(arr[1], 2).. ' \n'<br/>    html = html .."TEST : removeSubject" ..'\n'<br/>    mw.log(linkedwiki.removeSubject())<br/><br/><br/>    pT = pr..'9'<br/>    litteral='2.1'<br/>    html = html ..'Call Linkedwiki.addPropertyWithLitteral('..pT..',2.1)'..'\n'<br/>    html = html .."Insert "..litteral..'\n'<br/>    mw.log(linkedwiki.addPropertyWithLitteral(pT,2.1))<br/>    query= linkedwiki.getLastQuery()<br/>    mw.log(query)<br/>    html = html .."RESULT : " .. p.checkLitteral(query,litteral) ..'\n'<br/><br/>    arr = linkedwiki.explode(";",linkedwiki.getValue(pT))<br/>    html = html .."RESULT : Found " ..table.getn(arr).. ' triple\n'<br/>    html = html .."RESULT : " ..p.checkNumber(table.getn(arr), 1).. ' \n'<br/>    html = html .."RESULT : " ..p.checkNumber(arr[1], 2.1).. ' \n'<br/>    html = html .."TEST : removeSubject" ..'\n'<br/>    mw.log(linkedwiki.removeSubject())<br/><br/>    pT = pr..'10'<br/>    litteral='"2.1"^^<'..xsd.."decimal"..'>'<br/>    html = html ..'Call Linkedwiki.addPropertyWithLitteral('..pT..',2.1,xsd.."decimal")'..'\n'<br/>    html = html .."Insert "..litteral..'\n'<br/>    mw.log(linkedwiki.addPropertyWithLitteral(pT,2.1,xsd.."decimal"))<br/>    query= linkedwiki.getLastQuery()<br/>    mw.log(query)<br/>    html = html .."RESULT : " .. p.checkLitteral(query,litteral) ..'\n'<br/><br/>    arr = linkedwiki.explode(";",linkedwiki.getValue(pT))<br/>    html = html .."RESULT : Found " ..table.getn(arr).. ' triple\n'<br/>    html = html .."RESULT : " ..p.checkNumber(table.getn(arr), 1).. ' \n'<br/>    html = html .."RESULT : " ..p.checkNumber(arr[1], 2.1).. ' \n'<br/><br/><br/>    html = html .."TEST : removeSubject" ..'\n'<br/>    mw.log(linkedwiki.removeSubject())<br/><br/>    html = html .."----------------------------------------------------------------------------" ..'\n'<br/>    html = html .."TEST : without default subject" ..'\n'<br/><br/>    local subject2 = linkedwiki.getCurrentIRI().."2";<br/><br/>    pT = pr..'11'<br/>    litteral='2'<br/>    html = html ..'Call  Linkedwiki.addPropertyWithLitteral('..pT..',2,nil,nil,subject2)'..'\n'<br/>    html = html .."Insert "..litteral..'\n'<br/>    mw.log(linkedwiki.addPropertyWithLitteral(pT,2,nil,nil,subject2))<br/>    query= linkedwiki.getLastQuery()<br/>    mw.log(query)<br/>    html = html .."RESULT : " .. p.checkLitteral(query,litteral) ..'\n'<br/>    arr = linkedwiki.explode(";",linkedwiki.getValue(pT,subject2))<br/>    html = html .."RESULT : Found " ..table.getn(arr).. ' triple\n'<br/>    html = html .."RESULT : " ..p.checkNumber(table.getn(arr), 1).. ' \n'<br/>    html = html .."RESULT : " ..p.checkNumber(arr[1], 2).. ' \n'<br/><br/><br/>    html = html .."TEST : removeSubject" ..'\n'<br/>    mw.log(linkedwiki.removeSubject())<br/><br/>    html = html .."----------------------------------------------------------------------------" ..'\n'<br/>    html = html .."TEST : text with lang tag + function getString" ..'\n'<br/>    --linkedwiki.getString(iriProperty, tagLang, iriSubject)<br/><br/>    pT = pr..'12'<br/>    html = html ..'Call Linkedwiki.addPropertyWithLitteral('..pT..',"text")'..'\n'<br/>    html = html ..'Call Linkedwiki.addPropertyWithLitteral('..pT..',"text2",nil,"fr")'..'\n'<br/>    mw.log(linkedwiki.addPropertyWithLitteral(pT,"text"))<br/>    mw.log(linkedwiki.addPropertyWithLitteral(pT,"text2",nil,"fr"))<br/>    --query= linkedwiki.getLastQuery()<br/>    --mw.log(query)<br/>    arr = linkedwiki.explode(";",linkedwiki.getValue(pT))<br/>    html = html .."RESULT : Found " ..table.getn(arr).. ' triple\n'<br/>    html = html .."RESULT : " ..p.checkNumber(table.getn(arr),2).. ' \n'<br/>    html = html .."RESULT : " ..p.checkString(linkedwiki.getString(pT), "text").. ' \n'<br/>    html = html .."RESULT : " ..p.checkString(linkedwiki.getString(pT,"en"), "text").. ' \n'<br/>    html = html .."RESULT : " ..p.checkString(linkedwiki.getString(pT,"fr"), "text2").. ' \n'<br/>    html = html .."RESULT : " ..p.checkString(linkedwiki.getString(pT,"fr",subject), "text2").. ' \n'<br/><br/><br/>    html = html .."TEST : removeSubject" ..'\n'<br/>    mw.log(linkedwiki.removeSubject())<br/><br/><br/>    return "<nowiki><pre>"..mw.text.encode( html).."</pre></nowiki>"<br/>end<br/><br/>return p
	</td>
</tr>
<tr>
	<td>clickAndWait</td>
	<td>id=wpSave</td>
	<td></td>
</tr>
<tr>
	<td>open</td>
	<td>/index.php/LinkedWikiTestLua${Title}?action=edit</td>
	<td></td>
</tr>
<tr>
	<td>type</td>
	<td>id=wpTextbox1</td>
	<td>{{#invoke: LinkedWikiTest${Title} | tests}}</td>
</tr>
<tr>
	<td>clickAndWait</td>
	<td>id=wpSave</td>
	<td></td>
</tr>
<tr>
	<td>open</td>
	<td>/index.php/LinkedWikiTestLua${Title}?action=purge</td>
	<td></td>
</tr>
<tr>
	<td>clickAndWait</td>
	<td>css=input.mw-htmlform-submit</td>
	<td></td>
</tr>
<tr>
	<td>verifyText</td>
	<td>//div[@id='mw-content-text']/pre</td>
	<td>*TEST :*</td>
</tr>
<tr>
	<td>verifyNotText</td>
	<td>//div[@id='mw-content-text']/pre</td>
	<td>*KO*</td>
</tr>
</tbody></table>
</body>
</html>
